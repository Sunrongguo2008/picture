name: 🖼️ Convert Images to AVIF (Manual)

on:
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: 🛠️ Install libavif-bin
        run: |
          sudo apt-get update
          sudo apt-get install -y libavif-bin

      - name: 🔍 Find and convert images
        run: |
          EXCLUDE_DIRS=".git .github node_modules .npm .cache"
          EXCLUDE_PATTERN=""
          for dir in $EXCLUDE_DIRS; do
            EXCLUDE_PATTERN="$EXCLUDE_PATTERN -not -path './$dir/*'"
          done

          # Ensure README sections exist
          if ! grep -q "^## 待修改$" README.md 2>/dev/null; then
            echo -e "\n## 待修改\n" >> README.md
          fi
          if ! grep -q "^## 完成$" README.md 2>/dev/null; then
            echo -e "\n## 完成\n" >> README.md
          fi

          # Find image files
          mapfile -d '' image_files < <(find . -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.webp" \) $EXCLUDE_PATTERN -print0)

          if [ ${#image_files[@]} -eq 0 ]; then
            echo "::notice::No images found to convert."
            exit 0
          fi

          echo "::group::Converting images..."
          converted_entries=()
          for img in "${image_files[@]}"; do
            [ -z "$img" ] && continue
            avif_file="${img%.*}.avif"

            if [ -f "$avif_file" ]; then
              echo "::notice::Skipping (already exists): ${avif_file#./}"
              continue
            fi

            orig_size_kb=$(du -k "$img" | cut -f1)
            orig_size_mb=$(awk "BEGIN {printf \"%.1f\", $orig_size_kb/1024}")

            echo "Converting: ${img#./} → ${avif_file#./}"
            avifenc --min 0 --max 30 --speed 0 "$img" "$avif_file"

            if [ ! -f "$avif_file" ]; then
              echo "::error::Failed to convert ${img#./}"
              continue
            fi

            new_size_kb=$(du -k "$avif_file" | cut -f1)
            new_size_mb=$(awk "BEGIN {printf \"%.1f\", $new_size_kb/1024}")

            rel_img="${img#./}"
            rel_avif="${avif_file#./}"
            entry="- [ ] \`${rel_img}\`(${orig_size_mb}MB) -> \`${rel_avif}\`(${new_size_mb}MB)"
            converted_entries+=("$entry")
            echo "::notice::Converted: $rel_img → $rel_avif (${orig_size_mb}MB → ${new_size_mb}MB)"
          done
          echo "::endgroup::"

          if [ ${#converted_entries[@]} -gt 0 ]; then
            echo "::group::Updating README.md..."
            # Insert new entries right after "## 待修改"
            awk -v new_entries="${converted_entries[*]}" '
            /^## 待修改$/ {
              print $0
              if (length(new_entries) > 0) {
                split(new_entries, arr, "\n")
                for (i in arr) if (length(arr[i]) > 0) print arr[i]
              }
              next
            }
            { print }
            ' README.md > README.md.tmp && mv README.md.tmp README.md
            echo "::notice::Added ${#converted_entries[@]} entries to README.md"
            echo "::endgroup::"
          fi

      - name: 📤 Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git diff --staged --quiet || git commit -m "Convert images to AVIF format"
          git push

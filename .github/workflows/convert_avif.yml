name: Convert Images to AVIF

on:
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install libavif tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libavif-bin
      
      - name: Find and convert images
        run: |
          # 排除的目录
          EXCLUDED_DIRS=(".git" ".github" "node_modules" ".npm" ".cache")
          
          # 构建 find 排除参数
          EXCLUDE_ARGS=""
          for dir in "${EXCLUDED_DIRS[@]}"; do
            EXCLUDE_ARGS="$EXCLUDE_ARGS -path './$dir' -prune -o"
          done
          
          # 查找所有图片文件并保存到临时文件
          eval "find . $EXCLUDE_ARGS -type f \( -iname \"*.png\" -o -iname \"*.jpg\" -o -iname \"*.jpeg\" -o -iname \"*.webp\" \) -print" > all_images.txt
          
          total=$(wc -l < all_images.txt)
          current=0
          
          if [ "$total" -eq 0 ]; then
            echo "未找到需要转换的图片文件"
            exit 0
          fi
          
          echo "找到 $total 个图片文件"
          
          # 转换图片
          while read -r file; do
            current=$((current + 1))
            dir=$(dirname "$file")
            base=$(basename "$file")
            name="${base%.*}"
            avif_file="$dir/$name.avif"
            
            # 跳过已存在的 avif 文件
            if [ -f "$avif_file" ]; then
              echo "[$current/$total] 跳过: $avif_file 已存在"
              continue
            fi
            
            # 获取原文件大小 (Ubuntu 使用 stat -c%s)
            orig_size=$(stat -c%s "$file")
            
            echo "[$current/$total] 转换中: $file -> $avif_file"
            avifenc --min 0 --max 30 --speed 0 "$file" "$avif_file"
            
            if [ $? -eq 0 ]; then
              # 获取转换后文件大小
              avif_size=$(stat -c%s "$avif_file")
              echo "$file|$avif_file|$orig_size|$avif_size" >> converted_files.txt
              echo "[$current/$total] ✓ 完成"
            else
              echo "[$current/$total] ✗ 失败"
            fi
          done < all_images.txt
          
          if [ -f converted_files.txt ]; then
            converted_count=$(wc -l < converted_files.txt)
            echo "========================================="
            echo "转换完成: $converted_count/$total 个文件"
            echo "========================================="
          fi
      
      - name: Update README
        run: |
          if [ ! -f converted_files.txt ]; then
            echo "没有文件需要转换"
            exit 0
          fi
          
          # 准备待修改区内容
          PENDING_SECTION=""
          while IFS='|' read -r orig avif orig_size avif_size; do
            # 转换字节为可读格式
            orig_readable=$(numfmt --to=iec-i --suffix=B $orig_size)
            avif_readable=$(numfmt --to=iec-i --suffix=B $avif_size)
            
            PENDING_SECTION="${PENDING_SECTION}- [ ] \`${orig}\` (${orig_readable}) -> \`${avif}\` (${avif_readable})"$'\n'
          done < converted_files.txt
          
          # 检查 README 是否存在
          if [ ! -f README.md ]; then
            echo "# Image Conversion Status" > README.md
            echo "" >> README.md
            echo "## 待修改" >> README.md
            echo "$PENDING_SECTION" >> README.md
            echo "## 完成" >> README.md
          else
            # 检查是否已有"待修改"区域
            if grep -q "## 待修改" README.md; then
              # 使用 Python 处理 README 更新
              cat > update_readme_add.py << 'PYTHON_SCRIPT'
import sys

with open('README.md', 'r', encoding='utf-8') as f:
    lines = f.readlines()

with open('converted_files.txt', 'r', encoding='utf-8') as f:
    new_items = []
    for line in f:
        parts = line.strip().split('|')
        if len(parts) == 4:
            orig, avif, orig_size, avif_size = parts
            orig_readable = f"{int(orig_size) / 1024 / 1024:.2f}MB" if int(orig_size) > 1024*1024 else f"{int(orig_size) / 1024:.2f}KB"
            avif_readable = f"{int(avif_size) / 1024 / 1024:.2f}MB" if int(avif_size) > 1024*1024 else f"{int(avif_size) / 1024:.2f}KB"
            new_items.append(f"- [ ] `{orig}` ({orig_readable}) -> `{avif}` ({avif_readable})\n")

new_lines = []
added = False
for i, line in enumerate(lines):
    new_lines.append(line)
    if line.strip() == '## 待修改' and not added:
        new_lines.extend(new_items)
        added = True

with open('README.md', 'w', encoding='utf-8') as f:
    f.writelines(new_lines)
PYTHON_SCRIPT
              python3 update_readme_add.py
            else
              # 添加新区域
              echo "" >> README.md
              echo "## 待修改" >> README.md
              echo "$PENDING_SECTION" >> README.md
              echo "" >> README.md
              echo "## 完成" >> README.md
            fi
          fi
      
      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git diff --staged --quiet || git commit -m "Convert images to AVIF format"
          git push
